<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ALIBABA WIKI - 菩薩球球</title>
    <link>http://myghost.aligogo.pw/post/index.xml</link>
    <description>Recent content in Posts on ALIBABA WIKI - 菩薩球球</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 27 Feb 2017 06:03:19 +0000</lastBuildDate>
    <atom:link href="http://myghost.aligogo.pw/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>good to great</title>
      <link>http://myghost.aligogo.pw/post/good-to-great/</link>
      <pubDate>Mon, 27 Feb 2017 06:03:19 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/good-to-great/</guid>
      <description>&lt;p&gt;I read &lt;strong&gt;Good to Great in January 2016&lt;/strong&gt;. An awesome read sharing detailed analysis on how good companies became great.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>good to great</title>
      <link>http://myghost.aligogo.pw/post/old/good-to-great/</link>
      <pubDate>Mon, 27 Feb 2017 06:03:19 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/good-to-great/</guid>
      <description>&lt;p&gt;I read &lt;strong&gt;Good to Great in January 2016&lt;/strong&gt;. An awesome read sharing detailed analysis on how good companies became great.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python 的 生成式 (List Comprehensions)...待續</title>
      <link>http://myghost.aligogo.pw/post/list_comprehensions/</link>
      <pubDate>Sun, 26 Feb 2017 11:55:26 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/list_comprehensions/</guid>
      <description>

&lt;h2 id=&#34;串列生成式&#34;&gt;串列生成式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;語法: [運算式 for 項目 in 可佚代項目] 或是 [運算式 for 項目 in 可佚代項目 if 條件式]&lt;/li&gt;
&lt;li&gt;一個典型例子,列出1 - 100 屬於偶數是哪些&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;傳統寫法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
yy=[]
for xx in range(1,101):
    if xx % 2 == 0:
    ┆   yy.append(xx)
print(yy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用串列生成式寫法,是不是很簡潔只要一列就可解決。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
print([xx for xx in range(1,101) if xx % 2 == 0])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;字典生成式&#34;&gt;字典生成式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;語法: {鍵運算式:值運算式 for 運算式 in 可佚代項目}&lt;/li&gt;
&lt;li&gt;看例子,有一個字串為 &amp;ldquo;jkjireddrrgkQQkfdcSSSewfjwfwwszzssEEWW&amp;rdquo;,要計算每個大寫或小寫字母出現的次數。
看盤重點在 &lt;strong&gt;letter_count={world:strT.count(world) for world in set(strT)}&lt;/strong&gt;
&lt;code&gt;
#!/usr/bin/env python                                                                                                                 
strT=&amp;quot;jkjireddrrgkQQkfdcSSSewfjwfwwszzssEEWW&amp;quot;                                                                                         
letter_count={world:strT.count(world) for world in set(strT)}                                                                         
for  world, worldcount in  letter_count.items():                                                                                      
print(world +  &amp;quot; ==&amp;gt; &amp;quot;+  str(worldcount))
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.books.com.tw/products/0010690075&#34;&gt;Introducing-Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python 的 生成式 (List Comprehensions)...待續</title>
      <link>http://myghost.aligogo.pw/post/old/list_comprehensions/</link>
      <pubDate>Sun, 26 Feb 2017 11:55:26 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/list_comprehensions/</guid>
      <description>

&lt;h2 id=&#34;串列生成式&#34;&gt;串列生成式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;語法: [運算式 for 項目 in 可佚代項目] 或是 [運算式 for 項目 in 可佚代項目 if 條件式]&lt;/li&gt;
&lt;li&gt;一個典型例子,列出1 - 100 屬於偶數是哪些&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;傳統寫法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
yy=[]
for xx in range(1,101):
    if xx % 2 == 0:
    ┆   yy.append(xx)
print(yy)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用串列生成式寫法,是不是很簡潔只要一列就可解決。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
print([xx for xx in range(1,101) if xx % 2 == 0])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;字典生成式&#34;&gt;字典生成式&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;語法: {鍵運算式:值運算式 for 運算式 in 可佚代項目}&lt;/li&gt;
&lt;li&gt;看例子,有一個字串為 &amp;ldquo;jkjireddrrgkQQkfdcSSSewfjwfwwszzssEEWW&amp;rdquo;,要計算每個大寫或小寫字母出現的次數。
看盤重點在 &lt;strong&gt;letter_count={world:strT.count(world) for world in set(strT)}&lt;/strong&gt;
&lt;code&gt;
#!/usr/bin/env python                                                                                                                 
strT=&amp;quot;jkjireddrrgkQQkfdcSSSewfjwfwwszzssEEWW&amp;quot;                                                                                         
letter_count={world:strT.count(world) for world in set(strT)}                                                                         
for  world, worldcount in  letter_count.items():                                                                                      
print(world +  &amp;quot; ==&amp;gt; &amp;quot;+  str(worldcount))
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.books.com.tw/products/0010690075&#34;&gt;Introducing-Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi :使用ttl線登入Console 端</title>
      <link>http://myghost.aligogo.pw/post/old/rpi1/</link>
      <pubDate>Mon, 20 Feb 2017 15:11:26 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/rpi1/</guid>
      <description>

&lt;h2 id=&#34;說明&#34;&gt;說明:&lt;/h2&gt;

&lt;p&gt;在管理電腦或伺服器若網路或相關遠端登入不通時,就會跑到電腦前面插上螢幕,鍵盤,滑鼠等來登入電腦console端做管理。但不可避免的要被許多條線給牽絆。早期會使用RS-232或是 RS-232轉USB 等線頭,一端是RS-232插到伺服器上,另一端usb插到筆電,再安裝驅動及設定序列阜 &lt;strong&gt;com port&lt;/strong&gt; ,&lt;strong&gt;Speed&lt;/strong&gt;等設定,即可開啟console 端。這邊所要介紹是&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-hk/%E6%A0%91%E8%8E%93%E6%B4%BE&amp;quot;target=&amp;quot;_blank&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/strong&gt;(單板電腦),這個&lt;strong&gt;Raspberry Pi&lt;/strong&gt;本身沒有RS-232介面,只能使用USB轉ttl來登入console 端。&lt;/p&gt;

&lt;h2 id=&#34;準備材料&#34;&gt;準備材料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi ,(第1代 - 第3代都可以)&lt;/li&gt;
&lt;li&gt;USB轉ttl (價格約70~100元左右), (購買可以到一般電子材料行 ,&lt;a href=&#34;https://www.raspberrypi.com.tw/2037/505/&amp;quot;target=&amp;quot;_blank&#34;&gt;台灣樹莓派&lt;/a&gt;,或是&lt;a href=&#34;http://search.ruten.com.tw/search/s000.php?enc=u&amp;amp;searchfrom=classf&amp;amp;enc=u&amp;amp;c=0011&amp;amp;k=usb%E8%BD%89ttl%E7%B7%9A&amp;quot;target=&amp;quot;_blank&#34;&gt;露天&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;USB 電源 5V 2A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;整體展示&#34;&gt;整體展示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/ALLShow.jpg&#34; alt=&#34;AllShow&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;實作步驟&#34;&gt;實作步驟&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;將TTL線 接到 Raspberry Pi 上的 GPIO, usb 接到筆電
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/RasberryPi3_GPIO--.PNG&#34; alt=&#34;GPIO_RPI3&#34; /&gt;
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/TTL-USB.PNG&#34; alt=&#34;TTLtoUSB&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TTL線 黑 (接地) 接到  GPIO pin 06 (接地)
TTL線 白  (RX)  接到  GPIO pin 08 (UART TXD)
TTL線 綠  (TX)  接到  GPIO pin 10 (UART RXD)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: Raspberry Pi 3 有藍芽裝置,預設開啟藍芽會占用掉 UART,也就是 GPIO &lt;strong&gt;pin 8&lt;/strong&gt;及 &lt;strong&gt;pin 10&lt;/strong&gt;的位置。解決方法是 將 RPI3 SD卡裡 有一個檔案 config.txt,在此檔案最後面加上 &lt;strong&gt;dtoverlay=pi3-disable-bt&lt;/strong&gt;,指示關掉藍芽。進系統後,徹底將藍芽服務關閉 (systemctl disable hciuart)&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;為了要使用 usb轉TTL 線,筆電需要安裝好驅動程式
大部分 TTL轉USB線都是使用 旺玖科技的晶片,因此到此下載驅動程式
&lt;a href=&#34;http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=225&amp;amp;pcid=41&amp;quot;target=&amp;quot;_blank&#34;&gt;PL2303&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意:目前PL2303 支援 Win8 及Win 10 不是很好,若要使用看&lt;a href=&#34;http://yhhuang1966.blogspot.tw/2015/07/pl2303hx-win8.html&amp;quot;target=&amp;quot;_blank&#34;&gt;這篇解決&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;設定Serial終端機 (這邊使用&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&amp;quot;target=&amp;quot;_blank&#34;&gt;putty&lt;/a&gt;)
以上步驟都好之後,將TTL轉USB的USB 插到筆電,要到裝置管理員查看是否有抓到 ,並且是第幾個com port。下圖看到是 com port 8
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/DeviceManager_COM.PNG&#34; alt=&#34;com_port&#34; /&gt;
之後 開啟putty 終端機 設定 com port 及 速率為115200
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/putty.PNG&#34; alt=&#34;putty_config&#34; /&gt;&lt;/li&gt;
&lt;li&gt;開啟終端機是否有開機的訊息出來
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/putty_login.PNG&#34; alt=&#34;putty_login&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.com.tw/1999/connect-to-raspberry-pi-via-serial/&amp;quot;target=&amp;quot;_blank&#34;&gt;台灣樹莓派-從序列埠登入到 Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yehnan.blogspot.tw/2013/09/raspberry-pi.html&amp;quot;target=&amp;quot;_blank&#34;&gt;Raspberry Pi：透過序列埠登入系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.com/randy1977/2542/pc-usbttl-serial-tty-raspberry-pi-3#&amp;quot;target=&amp;quot;_blank&#34;&gt;樹莓派基礎-從電腦PC USB轉TTL 序列埠(Serial TTY)登入到 Raspberry Pi3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.gtwang.org/iot/pl2303-hxd-usb-ttl-raspberry-pi-b-plus/&amp;quot;target=&amp;quot;_blank&#34;&gt;使用 PL2303 HXD USB 轉 TTL 傳輸線，從序列埠登入到 Raspberry Pi B+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi :使用ttl線登入Console 端</title>
      <link>http://myghost.aligogo.pw/post/rpi1/</link>
      <pubDate>Mon, 20 Feb 2017 15:11:26 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/rpi1/</guid>
      <description>

&lt;h2 id=&#34;說明&#34;&gt;說明:&lt;/h2&gt;

&lt;p&gt;在管理電腦或伺服器若網路或相關遠端登入不通時,就會跑到電腦前面插上螢幕,鍵盤,滑鼠等來登入電腦console端做管理。但不可避免的要被許多條線給牽絆。早期會使用RS-232或是 RS-232轉USB 等線頭,一端是RS-232插到伺服器上,另一端usb插到筆電,再安裝驅動及設定序列阜 &lt;strong&gt;com port&lt;/strong&gt; ,&lt;strong&gt;Speed&lt;/strong&gt;等設定,即可開啟console 端。這邊所要介紹是&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/zh-hk/%E6%A0%91%E8%8E%93%E6%B4%BE&amp;quot;target=&amp;quot;_blank&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/strong&gt;(單板電腦),這個&lt;strong&gt;Raspberry Pi&lt;/strong&gt;本身沒有RS-232介面,只能使用USB轉ttl來登入console 端。&lt;/p&gt;

&lt;h2 id=&#34;準備材料&#34;&gt;準備材料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry Pi ,(第1代 - 第3代都可以)&lt;/li&gt;
&lt;li&gt;USB轉ttl (價格約70~100元左右), (購買可以到一般電子材料行 ,&lt;a href=&#34;https://www.raspberrypi.com.tw/2037/505/&amp;quot;target=&amp;quot;_blank&#34;&gt;台灣樹莓派&lt;/a&gt;,或是&lt;a href=&#34;http://search.ruten.com.tw/search/s000.php?enc=u&amp;amp;searchfrom=classf&amp;amp;enc=u&amp;amp;c=0011&amp;amp;k=usb%E8%BD%89ttl%E7%B7%9A&amp;quot;target=&amp;quot;_blank&#34;&gt;露天&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;USB 電源 5V 2A&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;整體展示&#34;&gt;整體展示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/ALLShow.jpg&#34; alt=&#34;AllShow&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;實作步驟&#34;&gt;實作步驟&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;將TTL線 接到 Raspberry Pi 上的 GPIO, usb 接到筆電
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/RasberryPi3_GPIO--.PNG&#34; alt=&#34;GPIO_RPI3&#34; /&gt;
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/TTL-USB.PNG&#34; alt=&#34;TTLtoUSB&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TTL線 黑 (接地) 接到  GPIO pin 06 (接地)
TTL線 白  (RX)  接到  GPIO pin 08 (UART TXD)
TTL線 綠  (TX)  接到  GPIO pin 10 (UART RXD)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注意: Raspberry Pi 3 有藍芽裝置,預設開啟藍芽會占用掉 UART,也就是 GPIO &lt;strong&gt;pin 8&lt;/strong&gt;及 &lt;strong&gt;pin 10&lt;/strong&gt;的位置。解決方法是 將 RPI3 SD卡裡 有一個檔案 config.txt,在此檔案最後面加上 &lt;strong&gt;dtoverlay=pi3-disable-bt&lt;/strong&gt;,指示關掉藍芽。進系統後,徹底將藍芽服務關閉 (systemctl disable hciuart)&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;為了要使用 usb轉TTL 線,筆電需要安裝好驅動程式
大部分 TTL轉USB線都是使用 旺玖科技的晶片,因此到此下載驅動程式
&lt;a href=&#34;http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=225&amp;amp;pcid=41&amp;quot;target=&amp;quot;_blank&#34;&gt;PL2303&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注意:目前PL2303 支援 Win8 及Win 10 不是很好,若要使用看&lt;a href=&#34;http://yhhuang1966.blogspot.tw/2015/07/pl2303hx-win8.html&amp;quot;target=&amp;quot;_blank&#34;&gt;這篇解決&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;設定Serial終端機 (這邊使用&lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html&amp;quot;target=&amp;quot;_blank&#34;&gt;putty&lt;/a&gt;)
以上步驟都好之後,將TTL轉USB的USB 插到筆電,要到裝置管理員查看是否有抓到 ,並且是第幾個com port。下圖看到是 com port 8
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/DeviceManager_COM.PNG&#34; alt=&#34;com_port&#34; /&gt;
之後 開啟putty 終端機 設定 com port 及 速率為115200
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/putty.PNG&#34; alt=&#34;putty_config&#34; /&gt;&lt;/li&gt;
&lt;li&gt;開啟終端機是否有開機的訊息出來
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/02/putty_login.PNG&#34; alt=&#34;putty_login&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.com.tw/1999/connect-to-raspberry-pi-via-serial/&#34;&gt;台灣樹莓派-從序列埠登入到 Raspberry Pi&lt;/a&gt;{: target=&amp;rdquo;_blank&amp;rdquo;}&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yehnan.blogspot.tw/2013/09/raspberry-pi.html&amp;quot;target=&amp;quot;_blank&#34;&gt;Raspberry Pi：透過序列埠登入系統&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.com/randy1977/2542/pc-usbttl-serial-tty-raspberry-pi-3#&amp;quot;target=&amp;quot;_blank&#34;&gt;樹莓派基礎-從電腦PC USB轉TTL 序列埠(Serial TTY)登入到 Raspberry Pi3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.gtwang.org/iot/pl2303-hxd-usb-ttl-raspberry-pi-b-plus/&amp;quot;target=&amp;quot;_blank&#34;&gt;使用 PL2303 HXD USB 轉 TTL 傳輸線，從序列埠登入到 Raspberry Pi B+&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>工業4.0  ...待續</title>
      <link>http://myghost.aligogo.pw/post/gong-ye-4-0/</link>
      <pubDate>Mon, 06 Feb 2017 18:21:34 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/gong-ye-4-0/</guid>
      <description>

&lt;h2 id=&#34;何謂工業4-0&#34;&gt;何謂工業4.0&lt;/h2&gt;

&lt;p&gt;記得兩年前,在一個研討會上聽到&lt;strong&gt;工業4.0&lt;/strong&gt;的keyWord,當時對這個名詞還是一個模糊概念。剛好今天聽到一個對工業4.0簡單扼要的解釋。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;工業4.0 = 工業物聯網(Iot)  + BigData + 企業管理 (ERP)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>工業4.0  ...待續</title>
      <link>http://myghost.aligogo.pw/post/old/gong-ye-4-0/</link>
      <pubDate>Mon, 06 Feb 2017 18:21:34 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/gong-ye-4-0/</guid>
      <description>

&lt;h2 id=&#34;何謂工業4-0&#34;&gt;何謂工業4.0&lt;/h2&gt;

&lt;p&gt;記得兩年前,在一個研討會上聽到&lt;strong&gt;工業4.0&lt;/strong&gt;的keyWord,當時對這個名詞還是一個模糊概念。剛好今天聽到一個對工業4.0簡單扼要的解釋。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;工業4.0 = 工業物聯網(Iot)  + BigData + 企業管理 (ERP)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Nginx &#43; uwsgi &#43; Flask</title>
      <link>http://myghost.aligogo.pw/post/nginx-uwsgi-flask/</link>
      <pubDate>Sun, 22 Jan 2017 18:04:18 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/nginx-uwsgi-flask/</guid>
      <description>

&lt;h2 id=&#34;目標&#34;&gt;目標&lt;/h2&gt;

&lt;p&gt;本範例主要演示利用Python 撰寫一個取得目前自己的IP及此IP是屬於哪個國家。類似這樣一個網站&lt;a href=&#34;https://ifconfig.co/&amp;quot;target=&amp;quot;_blank&#34;&gt;What is my IP address&lt;/a&gt;,另外要使用Python 做一個動態網頁可以使用支援Python 的框架(FrameWork),如 &lt;a href=&#34;http://docs.jinkan.org/docs/flask/&amp;quot;target=&amp;quot;_blank&#34;&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;http://bottlepy.org/docs/dev/&amp;quot;target=&amp;quot;_blank&#34;&gt;&lt;strong&gt;Bottle&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;&lt;strong&gt;Django&lt;/strong&gt;&lt;/a&gt;等。本範例是使用&lt;a href=&#34;https://zh.wikipedia.org/wiki/Flask&amp;quot;target=&amp;quot;_blank&#34;&gt;Flask&lt;/a&gt;這個微框架,並搭配&lt;strong&gt;Nginx&lt;/strong&gt; (Web Server) 及 透過&lt;strong&gt;uWSGI&lt;/strong&gt; (server ,或是一種可與支援的程式溝通的協議)與 Python 溝通。&lt;/p&gt;

&lt;h2 id=&#34;架構說明&#34;&gt;架構說明&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;程式目錄內容
&lt;code&gt;
/var/www/html/WebPython/
├── getip.py
└── uwsgi2.ini
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;圖示說明
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/01/nginx_uWSGI_Python.png&#34; alt=&#34;nginx_uWSGi_Python&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-nginx&#34;&gt;install  nginx&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;um install nginx&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-flask-uwsgi&#34;&gt;install  Flask  ,uwsgi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pip install flask&lt;/li&gt;
&lt;li&gt;pip install uwsgi&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;編輯-python-程式&#34;&gt;編輯 Python 程式&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask , request , jsonify
from geoip import open_database

GeoipDataBase=&amp;quot;/usr/local/share/GeoIP/GeoLite2-Country.mmdb&amp;quot;
dbip=open_database(GeoipDataBase)

def getcountry(ip):
    ipstr=str(dbip.lookup(ip).country)
    return ipstr
    dbip.close()


app = Flask(__name__)

#@app.route(&#39;/&#39;)
#def index():
#    return &amp;quot;&amp;lt;h1&amp;gt;Hello Andy&amp;lt;/h1&amp;gt;&amp;quot;

@app.route(&amp;quot;/&amp;quot;,methods=[&amp;quot;GET&amp;quot;])
def getip():
    ip=request.remote_addr
    ip_country=&amp;quot;&amp;lt;h1&amp;gt;&amp;quot;  + getcountry(ip) + &amp;quot;\t&amp;quot; + ip + &amp;quot;&amp;lt;/h1&amp;gt;&amp;quot;
    return ip_country  , 200



if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&#39;188.166.241.76&#39;,port=80, debug=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;uwsgi&#34;&gt;uWSGi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;edit uWSGi Config  (uwsgi2.ini)
&lt;code&gt;
[uwsgi]
socket = 127.0.0.1:9091
uid = 997
chdir = /var/www/html/WebPython/
module = getip
callable = app
master = true
workers = 3
reload-mercy = 10   
max-requests = 100
pidfile = /var/run/uwsgi9090.pid
daemonize = /var/log/uwsgi9090.log
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;開啟uWSGi服務
&lt;code&gt;
uwsgi --ini  uwsgi2.ini
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;觀察是否有uWSgi程序或是開啟 9091阜口&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;ps aux|grep uwsgi
nginx    15803  0.0  3.5 235132 17592 ?        S    10:51   0:01 uwsgi --ini uwsgi2.ini
nginx    15808  0.0  2.8 235264 14196 ?        S    10:51   0:00 uwsgi --ini uwsgi2.ini
nginx    15809  0.0  2.9 235696 14776 ?        S    10:51   0:00 uwsgi --ini uwsgi2.ini
nginx    15810  0.0  2.9 235728 14812 ?        S    10:51   0:00 uwsgi --ini uwsgi2.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;netstat  -tlnp

tcp        0      0 127.0.0.1:9091          0.0.0.0:*               LISTEN      15803/uwsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;stop-or-reload-uwsgi&#34;&gt;stop or reload uwsgi&lt;/h2&gt;

&lt;p&gt;在修改python 程序後,並不會立即生效,需要reload uwsgi&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stop uwsgi
&lt;code&gt;
uwsgi  --stop /var/run/uwsgi9090.pid
rm -rf /var/run/uwsgi9090.pid
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reload uwsgi
&lt;code&gt;
uwsgi --reload /var/run/uwsgi9090.pid
&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;edit-nginx-config-and-start-nginx&#34;&gt;edit Nginx Config and  Start Nginx&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;/etc/nginx/conf.d/uwsgi.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;     server {
        listen       80; 
        server_name 192.168.200.1 ip.aligogo.pw;
        location / { 
          include  uwsgi_params;
          uwsgi_pass  127.0.0.1:9091;
          #uwsgi_pass  unix:/var/www/html/uwsgi.sock;                                                                                 
          #uwsgi_param UWSGI_SCRIPT hello.py;
          #uwsgi_param UWSGI_CHDIR /root/Python/introducing-python/myTest;
          #index  index.html index.htm;
    
        } 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;nginx -t  &amp;amp;&amp;amp; systemctl start  nginx&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;測試&#34;&gt;測試&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl http://ip.aligogo.pw
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coder.tw/?p=6375&amp;quot;target=&amp;quot;_blank&#34;&gt;uWSGI – 碼人日誌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.victorgau.com/?p=4140&amp;quot;target=&amp;quot;_blank&#34;&gt;[Flask] 怎麼取得使用者的 IP 位址?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Nginx &#43; uwsgi &#43; Flask</title>
      <link>http://myghost.aligogo.pw/post/old/nginx-uwsgi-flask/</link>
      <pubDate>Sun, 22 Jan 2017 18:04:18 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/nginx-uwsgi-flask/</guid>
      <description>

&lt;h2 id=&#34;目標&#34;&gt;目標&lt;/h2&gt;

&lt;p&gt;本範例主要演示利用Python 撰寫一個取得目前自己的IP及此IP是屬於哪個國家。類似這樣一個網站&lt;a href=&#34;https://ifconfig.co/&amp;quot;target=&amp;quot;_blank&#34;&gt;What is my IP address&lt;/a&gt;,另外要使用Python 做一個動態網頁可以使用支援Python 的框架(FrameWork),如 &lt;a href=&#34;http://docs.jinkan.org/docs/flask/&amp;quot;target=&amp;quot;_blank&#34;&gt;&lt;strong&gt;Flask&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;http://bottlepy.org/docs/dev/&amp;quot;target=&amp;quot;_blank&#34;&gt;&lt;strong&gt;Bottle&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;&lt;strong&gt;Django&lt;/strong&gt;&lt;/a&gt;等。本範例是使用&lt;a href=&#34;https://zh.wikipedia.org/wiki/Flask&amp;quot;target=&amp;quot;_blank&#34;&gt;Flask&lt;/a&gt;這個微框架,並搭配&lt;strong&gt;Nginx&lt;/strong&gt; (Web Server) 及 透過&lt;strong&gt;uWSGI&lt;/strong&gt; (server ,或是一種可與支援的程式溝通的協議)與 Python 溝通。&lt;/p&gt;

&lt;h2 id=&#34;架構說明&#34;&gt;架構說明&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;程式目錄內容
&lt;code&gt;
/var/www/html/WebPython/
├── getip.py
└── uwsgi2.ini
&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;圖示說明
&lt;img src=&#34;http://myghost.aligogo.pw/content/images/2017/01/nginx_uWSGI_Python.png&#34; alt=&#34;nginx_uWSGi_Python&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;install-nginx&#34;&gt;install  nginx&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;um install nginx&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install-flask-uwsgi&#34;&gt;install  Flask  ,uwsgi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;pip install flask&lt;/li&gt;
&lt;li&gt;pip install uwsgi&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;編輯-python-程式&#34;&gt;編輯 Python 程式&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;from flask import Flask , request , jsonify
from geoip import open_database

GeoipDataBase=&amp;quot;/usr/local/share/GeoIP/GeoLite2-Country.mmdb&amp;quot;
dbip=open_database(GeoipDataBase)

def getcountry(ip):
    ipstr=str(dbip.lookup(ip).country)
    return ipstr
    dbip.close()


app = Flask(__name__)

#@app.route(&#39;/&#39;)
#def index():
#    return &amp;quot;&amp;lt;h1&amp;gt;Hello Andy&amp;lt;/h1&amp;gt;&amp;quot;

@app.route(&amp;quot;/&amp;quot;,methods=[&amp;quot;GET&amp;quot;])
def getip():
    ip=request.remote_addr
    ip_country=&amp;quot;&amp;lt;h1&amp;gt;&amp;quot;  + getcountry(ip) + &amp;quot;\t&amp;quot; + ip + &amp;quot;&amp;lt;/h1&amp;gt;&amp;quot;
    return ip_country  , 200



if __name__ == &amp;quot;__main__&amp;quot;:
    app.run(host=&#39;188.166.241.76&#39;,port=80, debug=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;uwsgi&#34;&gt;uWSGi&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;edit uWSGi Config  (uwsgi2.ini)
&lt;code&gt;
[uwsgi]
socket = 127.0.0.1:9091
uid = 997
chdir = /var/www/html/WebPython/
module = getip
callable = app
master = true
workers = 3
reload-mercy = 10   
max-requests = 100
pidfile = /var/run/uwsgi9090.pid
daemonize = /var/log/uwsgi9090.log
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;開啟uWSGi服務
&lt;code&gt;
uwsgi --ini  uwsgi2.ini
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;觀察是否有uWSgi程序或是開啟 9091阜口&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;ps aux|grep uwsgi
nginx    15803  0.0  3.5 235132 17592 ?        S    10:51   0:01 uwsgi --ini uwsgi2.ini
nginx    15808  0.0  2.8 235264 14196 ?        S    10:51   0:00 uwsgi --ini uwsgi2.ini
nginx    15809  0.0  2.9 235696 14776 ?        S    10:51   0:00 uwsgi --ini uwsgi2.ini
nginx    15810  0.0  2.9 235728 14812 ?        S    10:51   0:00 uwsgi --ini uwsgi2.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;netstat  -tlnp

tcp        0      0 127.0.0.1:9091          0.0.0.0:*               LISTEN      15803/uwsgi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;stop-or-reload-uwsgi&#34;&gt;stop or reload uwsgi&lt;/h2&gt;

&lt;p&gt;在修改python 程序後,並不會立即生效,需要reload uwsgi&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stop uwsgi
&lt;code&gt;
uwsgi  --stop /var/run/uwsgi9090.pid
rm -rf /var/run/uwsgi9090.pid
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reload uwsgi
&lt;code&gt;
uwsgi --reload /var/run/uwsgi9090.pid
&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;edit-nginx-config-and-start-nginx&#34;&gt;edit Nginx Config and  Start Nginx&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;/etc/nginx/conf.d/uwsgi.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;     server {
        listen       80; 
        server_name 192.168.200.1 ip.aligogo.pw;
        location / { 
          include  uwsgi_params;
          uwsgi_pass  127.0.0.1:9091;
          #uwsgi_pass  unix:/var/www/html/uwsgi.sock;                                                                                 
          #uwsgi_param UWSGI_SCRIPT hello.py;
          #uwsgi_param UWSGI_CHDIR /root/Python/introducing-python/myTest;
          #index  index.html index.htm;
    
        } 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;nginx -t  &amp;amp;&amp;amp; systemctl start  nginx&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;測試&#34;&gt;測試&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;curl http://ip.aligogo.pw
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://coder.tw/?p=6375&amp;quot;target=&amp;quot;_blank&#34;&gt;uWSGI – 碼人日誌&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.victorgau.com/?p=4140&amp;quot;target=&amp;quot;_blank&#34;&gt;[Flask] 怎麼取得使用者的 IP 位址?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Alpine Linux Docker container with sshd</title>
      <link>http://myghost.aligogo.pw/post/alpine-ssh/</link>
      <pubDate>Sun, 15 Jan 2017 08:21:31 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/alpine-ssh/</guid>
      <description>

&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;

&lt;p&gt;Alpine Linux 是很輕量級且安全度很高的發行版本。基本系統（包含可執行核心）在5MB以下,非常適合運作在 嵌入式系統及單板電腦上。幾乎可以與BusyBox Linux 這個發行版本相比拼,但與BusyBox 不同的是它支援需多popular套件可以安裝。因此此篇章試著用Alpine image 運作在 Docker上。&lt;/p&gt;

&lt;h2 id=&#34;建立dockerfile&#34;&gt;建立Dockerfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;先建立 目錄 名為 Alpine, 此目錄下建 Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;mkdir /tmp/Alpine &amp;amp;&amp;amp; touch /tmp/Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;編寫 Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine:latest
RUN  apk update
RUN  apk add openssh
RUN  /usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
RUN  /usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
RUN  /usr/bin/ssh-keygen -t ecdsa -f  /etc/ssh/ssh_host_ecdsa_key                                                                     
RUN  /usr/bin/ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
RUN  echo &#39;root:qwedcxza&#39;|chpasswd
RUN  echo &#39;PermitRootLogin yes&#39; &amp;gt;&amp;gt; /etc/ssh/sshd_config
CMD [&amp;quot;/usr/sbin/sshd&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;/etc/ssh/sshd_config&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;執行建立docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/Alpine
docker build  -t ali:Alpine .
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;從剛建立的 ali:Alpine 這 image,建立container,並執行它&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker run  -d --name=AlpineTest --hostname=Alpine ali:Alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;看 此 Container 目前分配的 IP 是多少&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker inspect -f  &#39;{{.NetworkSettings.IPAddress}}&#39; AlpineTest

172.17.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;測試登入看看&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;ssh 172.17.0.2

Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

Alpine:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Main_Page&amp;quot;target=&amp;quot;_blank&#34;&gt;官方 Alpine wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management&amp;quot;target=&amp;quot;_blank&#34;&gt;官方 Alpine apk 套件管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.wu-boy.com/2015/12/a-super-small-docker-image-based-on-alpine-linux/&amp;quot;target=&amp;quot;_blank&#34;&gt;Alpine Linux 挑戰最小 docker image OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://firesk.blog.51cto.com/180373/46625&amp;quot;target=&amp;quot;_blank&#34;&gt;解決啟動SSHD服務時報錯&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Alpine Linux Docker container with sshd</title>
      <link>http://myghost.aligogo.pw/post/old/alpine-ssh/</link>
      <pubDate>Sun, 15 Jan 2017 08:21:31 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/alpine-ssh/</guid>
      <description>

&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;

&lt;p&gt;Alpine Linux 是很輕量級且安全度很高的發行版本。基本系統（包含可執行核心）在5MB以下,非常適合運作在 嵌入式系統及單板電腦上。幾乎可以與BusyBox Linux 這個發行版本相比拼,但與BusyBox 不同的是它支援需多popular套件可以安裝。因此此篇章試著用Alpine image 運作在 Docker上。&lt;/p&gt;

&lt;h2 id=&#34;建立dockerfile&#34;&gt;建立Dockerfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;先建立 目錄 名為 Alpine, 此目錄下建 Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;mkdir /tmp/Alpine &amp;amp;&amp;amp; touch /tmp/Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;編寫 Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine:latest
RUN  apk update
RUN  apk add openssh
RUN  /usr/bin/ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
RUN  /usr/bin/ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
RUN  /usr/bin/ssh-keygen -t ecdsa -f  /etc/ssh/ssh_host_ecdsa_key                                                                     
RUN  /usr/bin/ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
RUN  echo &#39;root:qwedcxza&#39;|chpasswd
RUN  echo &#39;PermitRootLogin yes&#39; &amp;gt;&amp;gt; /etc/ssh/sshd_config
CMD [&amp;quot;/usr/sbin/sshd&amp;quot;, &amp;quot;-D&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;/etc/ssh/sshd_config&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;執行建立docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp/Alpine
docker build  -t ali:Alpine .
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;從剛建立的 ali:Alpine 這 image,建立container,並執行它&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker run  -d --name=AlpineTest --hostname=Alpine ali:Alpine
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;看 此 Container 目前分配的 IP 是多少&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;docker inspect -f  &#39;{{.NetworkSettings.IPAddress}}&#39; AlpineTest

172.17.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;測試登入看看&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;ssh 172.17.0.2

Welcome to Alpine!

The Alpine Wiki contains a large amount of how-to guides and general
information about administrating Alpine systems.
See &amp;lt;http://wiki.alpinelinux.org&amp;gt;.

You can setup the system with the command: setup-alpine

You may change this message by editing /etc/motd.

Alpine:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Main_Page&amp;quot;target=&amp;quot;_blank&#34;&gt;官方 Alpine wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management&amp;quot;target=&amp;quot;_blank&#34;&gt;官方 Alpine apk 套件管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.wu-boy.com/2015/12/a-super-small-docker-image-based-on-alpine-linux/&amp;quot;target=&amp;quot;_blank&#34;&gt;Alpine Linux 挑戰最小 docker image OS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://firesk.blog.51cto.com/180373/46625&amp;quot;target=&amp;quot;_blank&#34;&gt;解決啟動SSHD服務時報錯&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>簡單示範 Beautiful Soup用法</title>
      <link>http://myghost.aligogo.pw/post/bs4/</link>
      <pubDate>Sat, 14 Jan 2017 07:24:46 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/bs4/</guid>
      <description>

&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Beautiful Soup&lt;/strong&gt; 是剖析HTML 及 xml 的Python Library。通常在寫網路機器人或是網路爬蟲相關程式時,會大量取回HTML資料,透過正規表示法及其他工具運用來處理取回的資料,來獲取我們所需要的資料,但資料處理的過程中是很繁瑣的,因此使用&lt;strong&gt;Beautiful Soup&lt;/strong&gt; 可以 從 HTML 或 XML提取我們要的資料,使過程簡單化。&lt;/p&gt;

&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;這邊演示是用&lt;strong&gt;Python 2.7.x&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pip install beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;為抓取網路上的資料,再額外裝&lt;a href=&#34;http://docs.python-requests.org/en/master/&amp;quot;target=&amp;quot;_blank&#34;&gt;requests&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip  install requests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;示範抓取資料&#34;&gt;示範抓取資料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;這邊使用 proxpn VPN 商提供VPN 服務資料來當作&lt;a href=&#34;http://proxpn.com/updater/locations-v3.xml&amp;quot;target=&amp;quot;_blank&#34;&gt;此範例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;載入 requests 及 BeautifulSoup模組
&lt;code&gt;
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import requests
&amp;gt;&amp;gt;&amp;gt; from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;抓取資料,會response回來很多HTML相關tag資料。
&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; url=&amp;quot;http://proxpn.com/updater/locations-v3.xml&amp;quot;
&amp;gt;&amp;gt;&amp;gt; rs=requests.get(url)
&amp;gt;&amp;gt;&amp;gt; rs.text
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;開始使用Beautiful Soup
&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; soup=BeautifulSoup(rs.text,&#39;html.parser&#39;)
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;依照此資料格是的tag (location)抓取第一筆資料
```
&amp;gt;&amp;gt;&amp;gt; soup.location&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;location&gt;\n&lt;name&gt;Free Chicago, IL&lt;/name&gt;\n&lt;type&gt;free&lt;/type&gt;\n&lt;openvpn-udp ip=&#34;196.52.21.65&#34; key=&#34;free-chi1&#34;&gt;\n&lt;/openvpn-udp&gt;\n&lt;openvpn-udp ip=&#34;196.52.21.134&#34; key=&#34;free-chi2&#34;&gt;\n&lt;/openvpn-udp&gt;\n&lt;/location&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - 呈上,取的&amp;quot;type&amp;quot; tag 的資料
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;soup.location.type.string
u&amp;rsquo;free&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - 利用 find_all 搜索 屬於 &amp;quot;name&amp;quot;的tag,資料回應以串列格式,並計算筆數,列出第二筆 &amp;quot;name&amp;quot; tag 資料
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;soup.find_all(&amp;lsquo;name&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;[&lt;name&gt;Free Chicago, IL&lt;/name&gt;, &lt;name&gt;New York, USA&lt;/name&gt;, &lt;name&gt;Miami, USA&lt;/name&gt;, &lt;name&gt;Los Angeles, USA&lt;/name&gt;, &lt;name&gt;Seattle, USA&lt;/name&gt;, &lt;name&gt;Chicago, USA&lt;/name&gt;, &lt;name&gt;Toronto, CA&lt;/name&gt;, &lt;name&gt;Amsterdam, NL&lt;/name&gt;, &lt;name&gt;Stockholm, SE&lt;/name&gt;, &lt;name&gt;London, UK&lt;/name&gt;, &lt;name&gt;Bucharest, RO&lt;/name&gt;, &lt;name&gt;Sydney, AU&lt;/name&gt;, &lt;name&gt;Frankfurt, DE&lt;/name&gt;, &lt;name&gt;Singapore, SG&lt;/name&gt;, &lt;name&gt;Hong Kong, CN&lt;/name&gt;, &lt;name&gt;San Jose, CR&lt;/name&gt;, &lt;name&gt;Hafnarfjordur, IS&lt;/name&gt;, &lt;name&gt;Zurich, CH&lt;/name&gt;, &lt;name&gt;Trial&lt;/name&gt;, &lt;name&gt;Miami&lt;/name&gt;, &lt;name&gt;New York&lt;/name&gt;, &lt;name&gt;Chicago&lt;/name&gt;, &lt;name&gt;Seattle&lt;/name&gt;, &lt;name&gt;Frankfurt&lt;/name&gt;, &lt;name&gt;Stockholm&lt;/name&gt;, &lt;name&gt;Amsterdam&lt;/name&gt;, &lt;name&gt;London&lt;/name&gt;]
&amp;gt;&amp;gt;&amp;gt; len(soup.find_all(&amp;lsquo;name&amp;rsquo;))
27&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;soup.find_all(&amp;lsquo;name&amp;rsquo;)[1].string
u&amp;rsquo;New York, USA&amp;rsquo;&lt;/p&gt;

&lt;p&gt;soup.find_all(&amp;lsquo;name&amp;rsquo;)[1].text
u&amp;rsquo;New York, USA&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
- 使用像 CSS 選擇器的方式,篩選出 &amp;quot;location&amp;quot; tag 中 &amp;quot;openvpn&amp;quot; tag 的資料。資料回應以串列輸出

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 - 呈上, 取第二筆資料 ,屬性值 &amp;quot;key&amp;quot; 及 &amp;quot;ip&amp;quot;。或是使用attrs 方法使屬性資料,回應成字典的格式
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1]
&lt;openvpn ip=&#34;192.240.98.3&#34; key=&#34;openvpn-mfl&#34;&gt;\n&lt;/openvpn&gt;&lt;/p&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1][&amp;lsquo;ip&amp;rsquo;]
u&amp;rsquo;192.240.98.3&amp;rsquo;&lt;/p&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1][&amp;lsquo;key&amp;rsquo;]
u&amp;rsquo;openvpn-mfl&amp;rsquo;&lt;/p&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1].attrs
{u&amp;rsquo;ip&amp;rsquo;: u&amp;rsquo;192.240.98.3&amp;rsquo;, u&amp;rsquo;key&amp;rsquo;: u&amp;rsquo;openvpn-mfl&amp;rsquo;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
## 利用此範例 及 上面取資料方法,組合一個簡單的程式

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#!/usr/bin/env python
import requests
from bs4 import BeautifulSoup
url=&amp;ldquo;&lt;a href=&#34;http://proxpn.com/updater/locations-v3.xml&amp;quot;&#34;&gt;http://proxpn.com/updater/locations-v3.xml&amp;quot;&lt;/a&gt;
sess=requests.Session()
rs=sess.get(url)
soup=BeautifulSoup(rs.text,&amp;lsquo;html.parser&amp;rsquo;)
for  iteam in soup.find_all(&amp;lsquo;location&amp;rsquo;):
     vpnName=iteam.select(&amp;lsquo;name&amp;rsquo;)[0].text
     vpnType=len(iteam.select(&amp;lsquo;type&amp;rsquo;))
     vpnUdp=len(iteam.select(&amp;lsquo;openvpn-udp&amp;rsquo;))
     vpnTcp=len(iteam.select(&amp;lsquo;openvpn&amp;rsquo;))
     if vpnType &amp;gt;0:
        vpnType=iteam.select(&amp;lsquo;type&amp;rsquo;)[0].text
     if vpnTcp &amp;gt;0:
        for vpnTcp in iteam.select(&amp;lsquo;openvpn&amp;rsquo;):
            print &amp;ldquo;TCP&amp;rdquo;,vpnName,&amp;ldquo;;&amp;rdquo;,vpnType,&amp;ldquo;;&amp;rdquo;,vpnTcp.get(&amp;lsquo;key&amp;rsquo;),&amp;ldquo;;&amp;rdquo;,vpnTcp.get(&amp;lsquo;ip&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt; if vpnUdp &amp;gt;0:
    for vpnUdp in iteam.select(&#39;openvpn-udp&#39;):
        print &amp;quot;UDP&amp;quot;,vpnName,&amp;quot;;&amp;quot;,vpnType,&amp;quot;;&amp;quot;,vpnUdp.get(&#39;key&#39;),&amp;quot;;&amp;quot;,vpnUdp.get(&#39;ip&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&amp;quot;target=&amp;quot;_blank&#34;&gt;官方 Beautiful Soup Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&amp;quot;target=&amp;quot;_blank&#34;&gt;中文版-官方 Beautiful Soup Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html&amp;quot;target=&amp;quot;_blank&#34;&gt;Beautiful Soup 的用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>簡單示範 Beautiful Soup用法</title>
      <link>http://myghost.aligogo.pw/post/old/bs4/</link>
      <pubDate>Sat, 14 Jan 2017 07:24:46 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/bs4/</guid>
      <description>

&lt;h2 id=&#34;簡介&#34;&gt;簡介&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Beautiful Soup&lt;/strong&gt; 是剖析HTML 及 xml 的Python Library。通常在寫網路機器人或是網路爬蟲相關程式時,會大量取回HTML資料,透過正規表示法及其他工具運用來處理取回的資料,來獲取我們所需要的資料,但資料處理的過程中是很繁瑣的,因此使用&lt;strong&gt;Beautiful Soup&lt;/strong&gt; 可以 從 HTML 或 XML提取我們要的資料,使過程簡單化。&lt;/p&gt;

&lt;h2 id=&#34;安裝&#34;&gt;安裝&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;這邊演示是用&lt;strong&gt;Python 2.7.x&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pip install beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;為抓取網路上的資料,再額外裝&lt;a href=&#34;http://docs.python-requests.org/en/master/&amp;quot;target=&amp;quot;_blank&#34;&gt;requests&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip  install requests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;示範抓取資料&#34;&gt;示範抓取資料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;這邊使用 proxpn VPN 商提供VPN 服務資料來當作&lt;a href=&#34;http://proxpn.com/updater/locations-v3.xml&amp;quot;target=&amp;quot;_blank&#34;&gt;此範例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;載入 requests 及 BeautifulSoup模組
&lt;code&gt;
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; import requests
&amp;gt;&amp;gt;&amp;gt; from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;抓取資料,會response回來很多HTML相關tag資料。
&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; url=&amp;quot;http://proxpn.com/updater/locations-v3.xml&amp;quot;
&amp;gt;&amp;gt;&amp;gt; rs=requests.get(url)
&amp;gt;&amp;gt;&amp;gt; rs.text
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;開始使用Beautiful Soup
&lt;code&gt;
&amp;gt;&amp;gt;&amp;gt; soup=BeautifulSoup(rs.text,&#39;html.parser&#39;)
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;依照此資料格是的tag (location)抓取第一筆資料
```
&amp;gt;&amp;gt;&amp;gt; soup.location&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;location&gt;\n&lt;name&gt;Free Chicago, IL&lt;/name&gt;\n&lt;type&gt;free&lt;/type&gt;\n&lt;openvpn-udp ip=&#34;196.52.21.65&#34; key=&#34;free-chi1&#34;&gt;\n&lt;/openvpn-udp&gt;\n&lt;openvpn-udp ip=&#34;196.52.21.134&#34; key=&#34;free-chi2&#34;&gt;\n&lt;/openvpn-udp&gt;\n&lt;/location&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - 呈上,取的&amp;quot;type&amp;quot; tag 的資料
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;soup.location.type.string
u&amp;rsquo;free&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - 利用 find_all 搜索 屬於 &amp;quot;name&amp;quot;的tag,資料回應以串列格式,並計算筆數,列出第二筆 &amp;quot;name&amp;quot; tag 資料
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;soup.find_all(&amp;lsquo;name&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;[&lt;name&gt;Free Chicago, IL&lt;/name&gt;, &lt;name&gt;New York, USA&lt;/name&gt;, &lt;name&gt;Miami, USA&lt;/name&gt;, &lt;name&gt;Los Angeles, USA&lt;/name&gt;, &lt;name&gt;Seattle, USA&lt;/name&gt;, &lt;name&gt;Chicago, USA&lt;/name&gt;, &lt;name&gt;Toronto, CA&lt;/name&gt;, &lt;name&gt;Amsterdam, NL&lt;/name&gt;, &lt;name&gt;Stockholm, SE&lt;/name&gt;, &lt;name&gt;London, UK&lt;/name&gt;, &lt;name&gt;Bucharest, RO&lt;/name&gt;, &lt;name&gt;Sydney, AU&lt;/name&gt;, &lt;name&gt;Frankfurt, DE&lt;/name&gt;, &lt;name&gt;Singapore, SG&lt;/name&gt;, &lt;name&gt;Hong Kong, CN&lt;/name&gt;, &lt;name&gt;San Jose, CR&lt;/name&gt;, &lt;name&gt;Hafnarfjordur, IS&lt;/name&gt;, &lt;name&gt;Zurich, CH&lt;/name&gt;, &lt;name&gt;Trial&lt;/name&gt;, &lt;name&gt;Miami&lt;/name&gt;, &lt;name&gt;New York&lt;/name&gt;, &lt;name&gt;Chicago&lt;/name&gt;, &lt;name&gt;Seattle&lt;/name&gt;, &lt;name&gt;Frankfurt&lt;/name&gt;, &lt;name&gt;Stockholm&lt;/name&gt;, &lt;name&gt;Amsterdam&lt;/name&gt;, &lt;name&gt;London&lt;/name&gt;]
&amp;gt;&amp;gt;&amp;gt; len(soup.find_all(&amp;lsquo;name&amp;rsquo;))
27&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;soup.find_all(&amp;lsquo;name&amp;rsquo;)[1].string
u&amp;rsquo;New York, USA&amp;rsquo;&lt;/p&gt;

&lt;p&gt;soup.find_all(&amp;lsquo;name&amp;rsquo;)[1].text
u&amp;rsquo;New York, USA&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
- 使用像 CSS 選擇器的方式,篩選出 &amp;quot;location&amp;quot; tag 中 &amp;quot;openvpn&amp;quot; tag 的資料。資料回應以串列輸出

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
 - 呈上, 取第二筆資料 ,屬性值 &amp;quot;key&amp;quot; 及 &amp;quot;ip&amp;quot;。或是使用attrs 方法使屬性資料,回應成字典的格式
 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1]
&lt;openvpn ip=&#34;192.240.98.3&#34; key=&#34;openvpn-mfl&#34;&gt;\n&lt;/openvpn&gt;&lt;/p&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1][&amp;lsquo;ip&amp;rsquo;]
u&amp;rsquo;192.240.98.3&amp;rsquo;&lt;/p&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1][&amp;lsquo;key&amp;rsquo;]
u&amp;rsquo;openvpn-mfl&amp;rsquo;&lt;/p&gt;

&lt;p&gt;soup.select(&amp;lsquo;location &amp;gt; openvpn&amp;rsquo;)[1].attrs
{u&amp;rsquo;ip&amp;rsquo;: u&amp;rsquo;192.240.98.3&amp;rsquo;, u&amp;rsquo;key&amp;rsquo;: u&amp;rsquo;openvpn-mfl&amp;rsquo;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
## 利用此範例 及 上面取資料方法,組合一個簡單的程式

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#!/usr/bin/env python
import requests
from bs4 import BeautifulSoup
url=&amp;ldquo;&lt;a href=&#34;http://proxpn.com/updater/locations-v3.xml&amp;quot;&#34;&gt;http://proxpn.com/updater/locations-v3.xml&amp;quot;&lt;/a&gt;
sess=requests.Session()
rs=sess.get(url)
soup=BeautifulSoup(rs.text,&amp;lsquo;html.parser&amp;rsquo;)
for  iteam in soup.find_all(&amp;lsquo;location&amp;rsquo;):
     vpnName=iteam.select(&amp;lsquo;name&amp;rsquo;)[0].text
     vpnType=len(iteam.select(&amp;lsquo;type&amp;rsquo;))
     vpnUdp=len(iteam.select(&amp;lsquo;openvpn-udp&amp;rsquo;))
     vpnTcp=len(iteam.select(&amp;lsquo;openvpn&amp;rsquo;))
     if vpnType &amp;gt;0:
        vpnType=iteam.select(&amp;lsquo;type&amp;rsquo;)[0].text
     if vpnTcp &amp;gt;0:
        for vpnTcp in iteam.select(&amp;lsquo;openvpn&amp;rsquo;):
            print &amp;ldquo;TCP&amp;rdquo;,vpnName,&amp;ldquo;;&amp;rdquo;,vpnType,&amp;ldquo;;&amp;rdquo;,vpnTcp.get(&amp;lsquo;key&amp;rsquo;),&amp;ldquo;;&amp;rdquo;,vpnTcp.get(&amp;lsquo;ip&amp;rsquo;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt; if vpnUdp &amp;gt;0:
    for vpnUdp in iteam.select(&#39;openvpn-udp&#39;):
        print &amp;quot;UDP&amp;quot;,vpnName,&amp;quot;;&amp;quot;,vpnType,&amp;quot;;&amp;quot;,vpnUdp.get(&#39;key&#39;),&amp;quot;;&amp;quot;,vpnUdp.get(&#39;ip&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/&amp;quot;target=&amp;quot;_blank&#34;&gt;官方 Beautiful Soup Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html&amp;quot;target=&amp;quot;_blank&#34;&gt;中文版-官方 Beautiful Soup Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.jikexueyuan.com/project/python-crawler-guide/beautiful-soup.html&amp;quot;target=&amp;quot;_blank&#34;&gt;Beautiful Soup 的用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>自編RPM ... 待續</title>
      <link>http://myghost.aligogo.pw/post/old/srpm/</link>
      <pubDate>Tue, 03 Jan 2017 15:10:05 +0000</pubDate>
      
      <guid>http://myghost.aligogo.pw/post/old/srpm/</guid>
      <description>

&lt;h2 id=&#34;macros&#34;&gt;Macros&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;在執行rpmbuild 指令編譯及打包時,定義一些環境變數。大陸用語稱為&lt;strong&gt;宏&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一般來說以RedHat系列版本,都定義在此檔&lt;strong&gt;/usr/lib/rpm/macros&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;藉由rpm指令顯示出&lt;strong&gt;rpmrc&lt;/strong&gt;及&lt;strong&gt;macro&lt;/strong&gt;
&lt;code&gt;
rpm --showrc
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;藉由rpm指令顯示出 macro 的值。example: %{_topdir}
&lt;code&gt;
rpm --eval %{_topdir}
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rpmbuild常用指令&#34;&gt;rpmbuild常用指令&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;只會打包成 &lt;strong&gt;FileName.rpm&lt;/strong&gt;檔(二進制Binary)。
&lt;code&gt;
rpmbuild -bb
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打包成 &lt;strong&gt;rpm&lt;/strong&gt;也同時打包成&lt;strong&gt;srpm&lt;/strong&gt;
&lt;code&gt;
rpmbuild -ba 
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;檢測SPEC文件中&lt;strong&gt;BuildRequires&lt;/strong&gt;的相依套件此環境是否已完成
&lt;code&gt;
rpmbuild --nobuild
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其餘參數如下
&lt;code&gt;
-bc  #僅執行到spec文件中的%build階段即停止進行
-bp  #僅執行至spec文件中的%prep階段即停止進行
-bi  #僅運行至spec文件中的%install階段即停止運行
-bl  #檢查spec文件中%file段所列出的文件是不是與BUILDROOT目錄中存在的文件完全匹配
-bs  #僅製作生成源碼格式的rpm包
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;參考資料&#34;&gt;參考資料:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mageedu.blog.51cto.com/4265610/1205205&amp;quot;target=&amp;quot;_blank&#34;&gt;【 馬哥教育內部文檔】-RPM製作指南 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/How_to_create_an_RPM_package/zh-tw&amp;quot;target=&amp;quot;_blank&#34;&gt;Fedora_How to create an RPM package_繁體中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mattshma.github.io/2015/11/04/rpm%E6%89%93%E5%8C%85/&amp;quot;target=&amp;quot;_blank&#34;&gt;RPM打包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>